// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Authentication
  accounts Account[]
  sessions Session[]

  // E-commerce relationships
  orders       Order[]
  cartItems    CartItem[]
  reviews      Review[]
  addresses    Address[]
  wishlists    WishlistItem[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  image       String?
  parentId    String?   @map("parent_id")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  @@map("categories")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  price       Decimal  @db.Money
  comparePrice Decimal? @db.Money
  sku         String?  @unique
  inventory   Int      @default(0)
  weight      Decimal?
  dimensions  String?
  status      ProductStatus @default(ACTIVE)
  featured    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  categoryId String?   @map("category_id")
  category   Category? @relation(fields: [categoryId], references: [id])
  images     ProductImage[]
  variants   ProductVariant[]
  orderItems OrderItem[]
  cartItems  CartItem[]
  reviews    Review[]
  wishlistItems WishlistItem[]

  @@map("products")
}

model ProductImage {
  id        String   @id @default(cuid())
  url       String
  altText   String?  @map("alt_text")
  order     Int      @default(0)
  productId String   @map("product_id")
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model ProductVariant {
  id        String   @id @default(cuid())
  name      String
  value     String
  price     Decimal? @db.Money
  sku       String?  @unique
  inventory Int      @default(0)
  productId String   @map("product_id")
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

model Order {
  id            String      @id @default(cuid())
  orderNumber   String      @unique @map("order_number")
  status        OrderStatus @default(PENDING)
  total         Decimal     @db.Money
  subtotal      Decimal     @db.Money
  tax           Decimal     @default(0) @db.Money
  shipping      Decimal     @default(0) @db.Money
  discount      Decimal     @default(0) @db.Money
  notes         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relationships
  userId    String    @map("user_id")
  user      User      @relation(fields: [userId], references: [id])
  items     OrderItem[]
  address   Address?  @relation(fields: [addressId], references: [id])
  addressId String?   @map("address_id")

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  quantity  Int
  price     Decimal  @db.Money
  total     Decimal  @db.Money
  orderId   String   @map("order_id")
  productId String   @map("product_id")
  createdAt DateTime @default(now())

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int
  userId    String   @map("user_id")
  productId String   @map("product_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  productId String   @map("product_id")
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlist_items")
}

model Address {
  id         String   @id @default(cuid())
  type       AddressType
  firstName  String   @map("first_name")
  lastName   String   @map("last_name")
  company    String?
  address1   String   @map("address_1")
  address2   String?  @map("address_2")
  city       String
  state      String
  postalCode String   @map("postal_code")
  country    String
  phone      String?
  isDefault  Boolean  @default(false) @map("is_default")
  userId     String   @map("user_id")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]

  @@map("addresses")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  title     String?
  content   String?
  verified  Boolean  @default(false)
  userId    String   @map("user_id")
  productId String   @map("product_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  DRAFT
  ARCHIVED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum AddressType {
  BILLING
  SHIPPING
}
